#!/bin/bash

fn_run() {
    echo "Starting cluster..."
    docker run --name scylla -d -p 9042:9042 scylladb/scylla
    docker run --name scylla-node2 -d scylladb/scylla --seeds="$(docker inspect --format='{{ .NetworkSettings.IPAddress }}' scylla)"
    docker run --name scylla-node3 -d scylladb/scylla --seeds="$(docker inspect --format='{{ .NetworkSettings.IPAddress }}' scylla)"
    echo "Cluster started, wait a bit"
}

fn_start() {
    echo "Starting cluster..."
    docker start scylla scylla-node2 scylla-node3
    echo "Cluster started, wait a bit"
}

fn_status() {
    docker exec -it scylla nodetool status
}

fn_stop() {
    echo "Stopping nodes and core..."
    docker stop scylla scylla-node2 scylla-node3
    echo "Done, bye!"
}

fn_sh() {
    docker exec -it scylla cqlsh
}

fn_rm() {
    docker rm -f scylla scylla-node2 scylla-node3
}

usage() {
    echo "Usage : scylla [command]
        Helps automate some commands to run a test scylla cluster

Commands:
    start     start the cluster You must already have the scylladb/scylla docker image
    
    run       start the cluster for the first time of after a cleanup through rm

    status    print the cluster status 

    stop      stop the cluster

    rm        remove the docker images of the cluster

    sh        run cqlsh on the main node
    " 
}


POSITIONAL=()
while [[ $# -gt 0 ]] ; do
	key="$1"

	case $key in
	    start)
	    fn_start
	    exit $?
	    ;;
	    status)
	    fn_status
	    exit $?
	    ;;
	    stop)
	    fn_stop
	    exit $?
	    ;;
        run)
        fn_run
        exit $?
        ;;
        sh)
        fn_sh
        exit $?
        ;;
        rm)
        fn_rm
        exit $?
        ;;
        help)
        usage
        exit 0
        ;;
	    *)    # unknown option
        echo "unknown option $1"
        usage
	    exit 1
	    ;;
	esac
done